#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

########################################
# CONFIGURATION AND CONSTANTS
########################################
readonly VERSION="20250529"
readonly CONFIG_FILE="$HOME/egg.env"

# name|remote_port|k8s_service
readonly SERVICES=(
    "mongo|27017|mongo"
    "mysql|3306|mysql"
    "mysql-egg|3306|mysql-egg"
    "api-hca|5000|api-hca"
    "api-websocket|6060|api-websocket"
    "redis|6379|redis-master"
)

# namespace:offset
readonly NAMESPACE_PORT_OFFSETS=(
    "development:0"
    "demo:20"
    "production:30"
)

declare -A PORT_FORWARD_SUCCESS
declare -A PORT_FORWARD_FAILED

readonly PORT_FORWARD_PID_DIR="/tmp/egg-ports"
readonly PORT_FORWARD_LOG_DIR="/tmp/egg-ports-logs"

# Colors
readonly COLOR_TEXT="\033[0m"
readonly COLOR_LIGHT_BLUE="\033[1;94m"
readonly COLOR_TITLE="\033[1;93m\033[4m"
readonly COLOR_LINES="\033[1;91m"
readonly TEXT_BOLD="\033[1m"
readonly TEXT_NORMAL="\033[0m"
readonly TEXT_ORANGE="\033[38;5;214m"
readonly COLOR_PURPLE="\033[48;5;63m"
readonly LINE="${COLOR_LINES}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${COLOR_TEXT}"

########################################
# HELPER FUNCTIONS
########################################

read_input() {
    local prompt="$1"
    local default="$2"
    local result
    echo -ne "${TEXT_BOLD}${prompt} (default: ${default}): ${TEXT_NORMAL}"
    read -r result
    echo "${result:-$default}"
}

prepare_pid_dir() {
    mkdir -p "$PORT_FORWARD_PID_DIR"
    mkdir -p "$PORT_FORWARD_LOG_DIR"
}

cleanup_logs() {
    rm -rf "$PORT_FORWARD_LOG_DIR"
}

save_pid() {
    local name="$1"
    local pid="$2"
    echo "$pid" >"${PORT_FORWARD_PID_DIR}/${name}.pid"
}

kill_all_port_forwards() {
    if [[ -d "$PORT_FORWARD_PID_DIR" ]]; then
        for pidfile in "$PORT_FORWARD_PID_DIR"/*.pid; do
            if [[ -f "$pidfile" ]]; then
                local pid
                pid=$(<"$pidfile")
                if kill "$pid" 2>/dev/null; then
                    echo "üîå Closed port-forward PID $pid"
                fi
                rm -f "$pidfile"
            fi
        done
        rmdir "$PORT_FORWARD_PID_DIR" 2>/dev/null || true
    else
        echo "No active port-forwards."
    fi
    cleanup_logs
}

terminal_title() { echo -ne "\033]0;$1\007"; }
br() { echo ""; }
title() {
    echo -e "${TEXT_BOLD}${TEXT_ORANGE}$1${COLOR_TEXT}"
    br
}
t_orange() { echo -e "${TEXT_ORANGE}$1${COLOR_TEXT}"; }
t_bold() { echo -e "${TEXT_BOLD}$1${COLOR_TEXT}"; }
welcome() {
    clear
    echo -e "$LINE"
    echo -e "                 üöÄ $(t_orange "Egg Launcher (v${VERSION})") üöÄ"
    echo -e "$LINE"
    echo ""
}

abort() {
    echo "Goodbye!"
    kill -INT $$
}

########################################
# CONFIGURATION MANAGEMENT
########################################

setup_config() {
    [[ -f "$CONFIG_FILE" ]] && source "$CONFIG_FILE"

    local updated=0

    if [[ -z "${GIT_USER_NAME:-}" ]]; then
        GIT_USER_NAME=$(read_input "Enter your name" "$(git config --get user.name || echo "")")
        updated=1
    fi

    if [[ -z "${GIT_USER_EMAIL:-}" ]]; then
        GIT_USER_EMAIL=$(read_input "Enter your email" "$(git config --get user.email || echo "")")
        updated=1
    fi

    if [[ -z "${REPOSITORIES_PATH:-}" ]]; then
        REPOSITORIES_PATH=$(read_input "Enter your repositories path" "$HOME/Github")
        updated=1
    fi

    if [[ $updated -eq 1 || ! -f "$CONFIG_FILE" ]]; then
        echo ""
        echo "Saving configuration..."
        cat <<EOF >"$CONFIG_FILE"
GIT_USER_NAME="$GIT_USER_NAME"
GIT_USER_EMAIL="$GIT_USER_EMAIL"
REPOSITORIES_PATH="$REPOSITORIES_PATH"
EOF
        echo "Configuration saved: $CONFIG_FILE"
    fi
}

load_config() {
    setup_config
}

########################################
# PORT FORWARDING
########################################

open_port_forward() {
    set +e
    local name="$1"
    local local_port="$2"
    local remote_port="$3"
    local service="$4"
    local namespace="$5"

    # Ajuste din√°mico para producci√≥n
    local service_k8s="$service"

    if [[ "$namespace" == "production" ]]; then
        case "$service" in
        mysql-egg)
            service_k8s="mysql"
            ;;
        redis)
            service_k8s="redis-master"
            ;;
        *)
            service_k8s="$service"
            ;;
        esac
    fi

    if ss -tuln | grep -q ":$local_port "; then
        PORT_FORWARD_SUCCESS["$namespace"]+=$'\n'"üîå ${name}:  http://localhost:${local_port} (Already running)"
        set -e
        return 0
    fi

    if ! kubectl get service "$service_k8s" -n "$namespace" >/dev/null 2>&1; then
        PORT_FORWARD_FAILED["$namespace"]+=$'\n'"‚ùå ${name}:  Not found in namespace"
        set -e
        return 1
    fi

    (kubectl port-forward service/"$service_k8s" "$local_port:$remote_port" -n "$namespace" >/dev/null 2>&1) &
    local pid=$!

    sleep 2

    if kill -0 "$pid" 2>/dev/null; then
        save_pid "$name" "$pid"
        PORT_FORWARD_SUCCESS["$namespace"]+=$'\n'"üîå ${name}:  http://localhost:${local_port} (PID ${pid})"
    else
        kill "$pid" 2>/dev/null || true
        rm -f "${PORT_FORWARD_PID_DIR}/${name}.pid"
        PORT_FORWARD_FAILED["$namespace"]+=$'\n'"‚ùå ${name}:  Port-forward failed"
    fi
    set -e
}

print_port_forward_summary() {
    br
    echo -e "${LINE}"
    title "üìã Port-Forward Summary"

    local total_success=0
    local total_failed=0

    for ns in development demo production; do
        echo -e "$(t_bold "$ns")"
        echo -e "-------------------------------------------------------------"

        if [[ -n "${PORT_FORWARD_SUCCESS[$ns]:-}" ]]; then
            echo -e "${PORT_FORWARD_SUCCESS[$ns]}"
            local count_success
            count_success=$(echo "${PORT_FORWARD_SUCCESS[$ns]}" | grep -c '^üîå')
            total_success=$((total_success + count_success))
        fi

        if [[ -n "${PORT_FORWARD_FAILED[$ns]:-}" ]]; then
            echo -e "${PORT_FORWARD_FAILED[$ns]}"
            local count_failed
            count_failed=$(echo "${PORT_FORWARD_FAILED[$ns]}" | grep -c '^‚ùå')
            total_failed=$((total_failed + count_failed))
        fi

        echo ""
    done

    echo -e "${LINE}"
    echo -e "üîå ${total_success} services running, ${total_failed} services failed"
    br
    echo -ne "\a" # <-- üéµ beep aqu√≠!
}

open_all_namespaces() {
    prepare_pid_dir
    terminal_title "PORTS"
    title "Connecting and opening ports for development, demo, production..."

    # Recorrer cada namespace y su offset
    for ns_offset in "${NAMESPACE_PORT_OFFSETS[@]}"; do
        IFS=':' read -r namespace offset <<<"$ns_offset"

        case "$namespace" in
        development)
            echo "üîë Setting credentials for development (GKE)..."
            gcloud container clusters get-credentials egg-gke-develop --zone us-central1-a --project egg-prod-api >/dev/null 2>&1
            ;;
        demo)
            echo "üîë Setting credentials for demo (GKE)..."
            gcloud container clusters get-credentials egg-gke-demo --zone us-central1-a --project egg-prod-api >/dev/null 2>&1
            ;;
        production)
            echo "üîë Setting credentials for production (AWS EKS)..."
            aws eks update-kubeconfig --name egg-eks-pro --region us-east-1 >/dev/null 2>&1
            ;;
        *)
            echo "‚ùå Unknown namespace $namespace"
            continue
            ;;
        esac

        # Una vez conectado, abrir los services de este namespace
        for entry in "${SERVICES[@]}"; do
            IFS='|' read -r service_short remote_port service_k8s <<<"$entry"
            local_port=$((remote_port + offset))
            open_port_forward "${service_short}-${namespace}" "$local_port" "$remote_port" "$service_k8s" "$namespace" || true
        done
    done

    print_port_forward_summary
}

########################################
# Update Functions
########################################
update_egg() {
    terminal_title "UPDATE"
    title "Updating Egg Launcher..."

    local temp_file="/tmp/egg_update"
    local current_file=$(realpath "$0")
    local update_url="https://raw.githubusercontent.com/galiprandi/bash/refs/heads/main/src/egg"
    local backup_file="$HOME/egg.v${VERSION}"

    # Check if we have write permissions for the current file location
    if [[ ! -w "$current_file" ]]; then
        echo -e "‚ö†Ô∏è $(t_orange "This script is installed at") $(t_bold "$current_file")"
        echo -e "   $(t_orange "which requires elevated privileges to update.")"
        echo ""

        # Ask user if they want to proceed with sudo
        read -p "$(echo -e "${TEXT_BOLD}Use sudo to update? (y/n):${TEXT_NORMAL} ")" use_sudo
        if [[ ! "$use_sudo" =~ ^[Yy]$ ]]; then
            echo "Update cancelled."
            return 1
        fi

        # Check if we have internet connectivity
        if ! curl -s --head "$update_url" >/dev/null; then
            echo -e "‚ùå $(t_orange "Update failed:") $(t_bold "Cannot connect to GitHub.")"
            return 1
        fi

        # Download the latest version
        echo "üì• Downloading latest version..."
        if ! curl -s "$update_url" -o "$temp_file"; then
            echo -e "‚ùå $(t_orange "Update failed:") $(t_bold "Download error.")"
            return 1
        fi

        # Compare versions
        local remote_version=$(grep "readonly VERSION=" "$temp_file" | cut -d'"' -f2)

        if [[ "$remote_version" == "$VERSION" ]]; then
            echo -e "‚úì $(t_orange "Already up-to-date") with version $(t_bold "$VERSION")"
            rm -f "$temp_file"
            return 0
        fi

        # Create backup
        echo "üíæ Creating backup at $backup_file..."
        if ! sudo cp "$current_file" "$backup_file" || ! sudo chown $(whoami): "$backup_file"; then
            echo -e "‚ùå $(t_orange "Backup failed:") $(t_bold "Could not create backup.")"
            rm -f "$temp_file"
            return 1
        fi

        # Update using sudo (use cp instead of mv for cross-device installations)
        echo "üîÑ Installing version $remote_version..."
        if ! sudo cp "$temp_file" "$current_file"; then
            echo -e "‚ùå $(t_orange "Update failed:") $(t_bold "Could not update file with sudo.")"
            rm -f "$temp_file"
            return 1
        fi

        # Preserve permissions
        if ! sudo chmod +x "$current_file"; then
            echo -e "‚ùå $(t_orange "Warning:") $(t_bold "Could not set executable permissions.")"
        fi

        rm -f "$temp_file"

        echo -e "‚úÖ $(t_orange "Update successful!") Updated from $(t_bold "$VERSION") to $(t_bold "$remote_version")"
        echo "   Backup saved as $backup_file"
        echo "   Please restart egg to use the new version."

        # Optional: Ask user if they want to restart now
        read -p "$(echo -e "${TEXT_BOLD}Restart egg now? (y/n):${TEXT_NORMAL} ")" restart
        if [[ "$restart" =~ ^[Yy]$ ]]; then
            echo "Restarting egg..."
            exec "$current_file"
        fi

        return 0
    fi

    # Continue with normal update process if we have write permissions

    # Check if we have internet connectivity
    if ! curl -s --head "$update_url" >/dev/null; then
        echo -e "‚ùå $(t_orange "Update failed:") $(t_bold "Cannot connect to GitHub.")"
        return 1
    fi

    # Download the latest version
    echo "üì• Downloading latest version..."
    if ! curl -s "$update_url" -o "$temp_file"; then
        echo -e "‚ùå $(t_orange "Update failed:") $(t_bold "Download error.")"
        return 1
    fi

    # Compare versions
    local remote_version=$(grep "readonly VERSION=" "$temp_file" | cut -d'"' -f2)

    if [[ "$remote_version" == "$VERSION" ]]; then
        echo -e "‚úì $(t_orange "Already up-to-date") with version $(t_bold "$VERSION")"
        rm -f "$temp_file"
        return 0
    fi

    # Backup current version with version number in filename
    echo "üíæ Creating backup at $backup_file..."
    if ! cp "$current_file" "$backup_file"; then
        echo -e "‚ùå $(t_orange "Backup failed:") $(t_bold "Could not create backup.")"
        rm -f "$temp_file"
        return 1
    fi

    # Replace current file with new version (use cp instead of mv for cross-device safety)
    echo "üîÑ Installing version $remote_version..."
    if ! cp "$temp_file" "$current_file"; then
        echo -e "‚ùå $(t_orange "Update failed:") $(t_bold "Could not replace file.")"
        echo "   Backup is available at $backup_file"
        rm -f "$temp_file"
        return 1
    fi

    rm -f "$temp_file"

    # Preserve execution permissions
    chmod +x "$current_file"

    echo -e "‚úÖ $(t_orange "Update successful!") Updated from $(t_bold "$VERSION") to $(t_bold "$remote_version")"
    echo "   Backup saved as $backup_file"
    echo "   Please restart egg to use the new version."

    # Optional: Ask user if they want to restart now
    read -p "$(echo -e "${TEXT_BOLD}Restart egg now? (y/n):${TEXT_NORMAL} ")" restart
    if [[ "$restart" =~ ^[Yy]$ ]]; then
        echo "Restarting egg..."
        exec "$current_file"
    fi

    return 0
}

########################################
# FRONTENDS
########################################

start_frontend() {
    local project="$1"
    local cmd="$2"
    local terminal_title="${3:-$project}"
    terminal_title "$terminal_title"
    cd "$REPOSITORIES_PATH/$project" && eval "$cmd"
}

########################################
# APIs
########################################

start_api() {
    local project="$1"
    local cmd="$2"
    terminal_title "$project"
    cd "$REPOSITORIES_PATH/$project" && eval "$cmd" | pino-pretty -c
}

########################################
# DATABASES
########################################

open_prisma_studio() {
    local schema="$1"
    terminal_title "Prisma Studio"
    cd "$REPOSITORIES_PATH/egg-api-signup" && npx prisma studio --schema "$schema"
}

########################################
# LOGS
########################################

show_service_log() {
    local service="$1"
    local namespace="${2:-development}"
    terminal_title "Logs $service ($namespace)"
    echo -e "${COLOR_TITLE}Showing logs for ${service} in namespace ${namespace}${TEXT_NORMAL}"
    kubectl logs -f -l app="$service" -n "$namespace" --all-containers=true | pino-pretty -c
}

########################################
# MENU EXECUTION
########################################

execute_option() {
    case "$1" in
    adm) start_frontend "egg-adm" "npm run dev" ;;
    admin) start_frontend "egg-admin" "NODE_OPTIONS=--openssl-legacy-provider npm start" ;;
    bko) start_frontend "egg-backoffice" "pnpm run start" ;;
    lxp) start_frontend "egg-lxp" "npm run start" ;;
    auth) start_api "egg-auth" "npm run dev" ;;
    aw) start_api "egg-widget-api" "NODE_ENV=development npm run start" ;;
    eco) start_api "api-ecosystem" "npm run start:dev" ;;
    api) start_api "egg-api" "npx ts-node-dev --respawn src/index.ts" ;;
    ai) start_frontend "api-ai" "npm run dev" ;;
    sdk) start_frontend "egg-video-sdk" "node --run start" "SDK" ;;
    meet) start_frontend "egg-video-app" "node --run dev" "Meet" ;;
    sign) start_frontend "egg-api-signup" "npm run dev" ;;
    users) start_api "api-user" "npm run start:dev" ;;
    ws) start_api "egg-api-websocket" "npm run dev" ;;
    mongo) open_prisma_studio "prisma/mongo-client/schema.prisma" ;;
    sql) open_prisma_studio "prisma/mysql-client/schema.prisma" ;;
    pf) open_all_namespaces ;;
    pc)
        title "Closing all port-forwarding..."
        kill_all_port_forwards
        br
        ;;
    update)
        update_egg
        ;;
    log)
        echo -e "${COLOR_TITLE}Available services:${TEXT_NORMAL} api-signup, api-egg, api-websocket, api-hca, mongo, mysql, mysql-egg, redis-zapp-master"
        read -p "Enter service name [api-signup]: " service
        service="${service:-api-signup}"
        echo -e "${COLOR_TITLE}Namespaces:${TEXT_NORMAL} development, demo, production"
        read -p "Enter namespace [development]: " namespace
        namespace="${namespace:-development}"
        show_service_log "$service" "$namespace"
        ;;
    x) abort ;;
    *)
        welcome
        echo "Invalid option: $1"
        exit 1
        ;;
    esac
}

show_options() {
    echo -e "$(t_orange "üì¶ APIs")                                     $(t_orange "üåê Frontends")"
    echo -e "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo -e "üîπ auth        - egg-auth                  üîπ adm        - egg-adm"
    echo -e "üîπ aw          - widget-api                üîπ admin      - egg-admin"
    echo -e "üîπ eco         - api-ecosystem             üîπ bko        - egg-backoffice"
    echo -e "üîπ api         - egg-api                   üîπ lxp        - egg-lxp"
    echo -e "üîπ ai          - api-ai                    üîπ meet       - egg-meet"
    echo -e "üîπ sdk         - egg-video-sdk"
    echo -e "üîπ sign        - api-signup"
    echo -e "üîπ users       - api-users"
    echo -e "üîπ ws          - egg-websocket"
    echo -e ""
    echo -e "$(t_orange "üõ†Ô∏è  Ports")                                    $(t_orange "üéõÔ∏è  Extras")"
    echo -e "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo -e "üîπ pf          - Forward all ports         üîπ log        - Show service logs"
    echo -e "üîπ pc          - Close all ports           üîπ update     - Update Egg Launcher"
    echo -e "üîπ sql         - Prisma Studio (MySQL)     üîπ mongo      - Prisma Studio (Mongo)"
    echo -e "üîπ                                         üîπ x          - Exit"
    echo -e ""
    echo -e "$LINE"
}

main_menu() {
    welcome
    show_options
    echo ""
    read -p "$(echo -e "${TEXT_BOLD}Enter option:${TEXT_NORMAL} ")" option
    execute_option "$option"
}

########################################
# MAIN EXECUTION
########################################
load_config
if [[ $# -eq 0 ]]; then
    main_menu
else
    execute_option "$1"
fi
